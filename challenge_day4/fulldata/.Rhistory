1+1
install.packages('tinytex')
tinytex::install_tinytex()
writeLines(c(
'\\documentclass{article}',
'\\begin{document}', 'Hello world!', '\\end{document}'
), 'test.tex')
tinytex::pdflatex('test.tex')
install.packages("tidyverse")
install.packages(c("glue", "magrittr", "rlang"))
license()
20*2
x<-5
y<-16
x*y
x<-4
x*y
install.packages('rmarkdown')
1+1
2>5
this_vector <- c(5,3,2,4,10,-50)
print (this_vector)
gapminder
gapminder
CountryData <- read.csv("C:/Users/jotin/Downloads/CountryData.csv", header=FALSE, sep=";")
View(CountryData)
CountryData %>%
filter(Country == "Brazil")
CountryData
as_tibble(CountryData)
as_tibble(starwars)
library(dplyr)
library(ggplot2)
as_tibble(CountryData)
CountryData %>%
filter(Country == "Brazil")
CountryData <- read.csv("C:/Users/jotin/Downloads/CountryData.csv", sep=";")
View(CountryData)
library(dplyr)
library(ggplot2)
CountryData %>%
filter(country == "Brazil")
CountryData %>%
filter(Country == "Brazil")
CountryData %>%
filter(Country == "Brazil")
CountryData %>%
filter(Country == "Brazil", Variable = "Change in Real Wages (%)") %>%
ggplot(CountryData, aes(x = "Unemployment Rate (%)", y = "Change in Real Wages")) +
geom_point()
CountryData %>%
filter(Country == "Brazil", Variable == "Change in Real Wages (%)") %>%
ggplot(CountryData, aes(x = "Unemployment Rate (%)", y = "Change in Real Wages")) +
geom_point()
phillips <- CountryData %>%
filter(Country == "Brazil", Variable == "Change in Real Wages (%)")
ggplot(phillips, aes(x = "Unemployment Rate (%)" y = "Change in Real Wages")) +
ggplot(phillips, aes_string(x = "`Unemployment Rate (%)`" y = "`Change in Real Wages`")) +
ggplot(phillips, aes(x = get("`Unemployment Rate (%)`") y = get("`Change in Real Wages`"))) +
NamesData <- str_replace_all_names(CountryData, " " = "_")
ggplot(phillips, aes(x = `Unemployment Rate (%)` y = `Change in Real Wages`)) +
ggplot(philips, aes(x = `Change in Real Wages (%)`, y = `Unemployment Rate (%)`)) +
geom_point()
phillips <- CountryData %>%
filter(Country == "Brazil")
ggplot(philips, aes(x = `Change in Real Wages (%)`, y = `Unemployment Rate (%)`)) +
geom_point()
philips
Philips
library(palmerpenguins)
install.packages(palmerpenguins)
install.packages(c("dplyr", "generics", "glue", "lme4", "magrittr", "pillar", "quantreg", "readr", "rlang", "tidyr"))
install.packages("palmerpenguins")
data(palmerpenguins)
palmerpenguins
library(palmerpenguins)
palmerpenguins
data(palmerpenguins)
library(dplyr)
fredgraph <- read.csv("~/Tilburg/Macro/Macro 2/fredgraph.csv")
View(fredgraph)
fredgraph
ggplot()
library(tidyverse)
library(ggplot2)
ggplot() +
geom_line(data = fredgraph, aes(x = DATE, y = CPIAUCSL_PCH))
fredgraphDate <- fredgraph %>%
as.Date(fredgraph, format = "%m/%y")
fredgraphDate <- fredgraph %>%
as.Date(fredgraph$DATE, format = "%m/%y")
fredgraphDate <- fredgraph %>%
paste(format(fredgraph$DATE, "Y"), sprintf("%02i", (as.POSIXlt(fredgraph$DATE)$mon) %/% 3L + 1L), sep = "/")
fredgraphDate <- fredgraph %>%
paste(format(fredgraph, "Y"), sprintf("%02i", (as.POSIXlt(fredgraph)$mon) %/% 3L + 1L), sep = "/")
library(tidyverse)
?mean
my_data <- c(1,2,3, NA)
mean(my_data)
mean(my_data, na.rm = FALSE)
mean(my_data, na.rm = TRUE)
?sum
?log
print (x = 100, 10)
log(100)
log(base = exp(1))
log(exp(1)^3, exp(1))
log(base = 10, x = 100)
log(100, base = 10)
square <- function(x){
x * x
}
a <- 3
square(a)
b <- c(1, 3)
square(b)
square_plus <- function(x, y = 1){
x * x + y
}
# use 2 arguments
square_plus(3, 5)
# use the default for the second argument
square_plus(3)
# function 'paste_together' can paste two strings together
paste_together <- function (x, y) {
x+y
# your code here
}
# Test your function by excuting the code below
# paste two variables and create a new string
paste_together("house number", 110)
?paste
# function 'paste_together' can paste two strings together
paste_together <- function (x, y) {
"x"+"y"
# your code here
}
# Test your function by excuting the code below
# paste two variables and create a new string
paste_together("house number", 110)
# function 'paste_together' can paste two strings together
paste_together <- function (x, y) {
x+y
# your code here
}
# Test your function by executing the code below
# paste two variables and create a new string
paste_together(2, 110)
# use a vector for one of the arguments
paste_together("letter", LETTERS)
# function 'paste_together' can paste two strings together
paste_together <- function (as.character(x), as.character(y)) {
# function 'paste_together' can paste two strings together
paste_together <- function (as.character(as.integer(x)), as.character(as.integer(y)) {
# function 'paste_together' can paste two strings together
paste_together <- function (toString(x), toString(y)) {
# function 'paste_together' can paste two strings together
paste_together <- function(toString(x), toString(y)) {
# function 'paste_together' can paste two strings together
paste_together <- function(x, y) {
x+y
# your code here
}
# Test your function by executing the code below
# paste two variables and create a new string
paste_together("house number", 110)
# function 'paste_together' can paste two strings together
paste_together <- function(toString(x), y) {
?paste
# function 'paste_together' can paste two strings together
paste_together <- function(x, y) {
paste(x, y, spe = " ")
# your code here
}
# Test your function by executing the code below
# paste two variables and create a new string
paste_together("house number", 110)
# use a vector for one of the arguments
paste_together("letter", LETTERS)
# function 'paste_together' can paste two strings together
paste_together <- function(x, y) {
paste(spe = " ")
# your code here
}
# Test your function by executing the code below
# paste two variables and create a new string
paste_together("house number", 110)
# use a vector for one of the arguments
paste_together("letter", LETTERS)
# function 'paste_together' can paste two strings together
paste_together <- function(x, y) {
paste(x+y, spe = " ")
# your code here
}
# Test your function by executing the code below
# paste two variables and create a new string
paste_together("house number", 110)
# function 'paste_together' can paste two strings together
paste_together <- function(x, y) {
paste(x,y, sep =  = " ")
# function 'paste_together' can paste two strings together
paste_together <- function(x, y) {
paste(x,y, sep = " ")
# your code here
}
# Test your function by executing the code below
# paste two variables and create a new string
paste_together("house number", 110)
# use a vector for one of the arguments
paste_together("letter", LETTERS)
# function 'paste_together' can paste two strings together
paste_together <- function(x, y) {
paste(x,y, sep = " ")
# your code here
}
# Test your function by executing the code below
# paste two variables and create a new string
paste_together("house number", 110)
# use a vector for one of the arguments
paste_together(c("letter"), LETTERS)
# function 'paste_together' can paste two strings together
paste_together <- function(x, y) {
paste(x,y, sep = " ")
# your code here
}
# Test your function by executing the code below
# paste two variables and create a new string
paste_together("house number", 110)
# use a vector for one of the arguments
paste_together("letter", c(LETTERS))
# function 'paste_together' can paste two strings together
paste_together <- function(x, y) {
paste(x,y, sep = " ")
# your code here
}
# Test your function by executing the code below
# paste two variables and create a new string
paste_together("house number", 110)
# use a vector for one of the arguments
paste_together(c("letter", LETTERS))
# function 'paste_together' can paste two strings together
paste_together <- function(x, y) {
paste(x,y, sep = " ")
# your code here
}
# Test your function by executing the code below
# paste two variables and create a new string
paste_together("house number", 110)
# use a vector for one of the arguments
paste_together("letter", LETTERS)
?inner_join
library(tidyverse)
library(readxl)
library(dplyr)
library(readr)
library(ggrepel)
?inner_join
?anti_join
install.packages("modeldata")
library(modeldata)
library(modeldata)
data("attrition")
force(attrition)
view(attrition)
str(attrition)
View(attrition)
View(attrition)
df1 <- attrition %>%
select_if(is.factor)
library(dplyr)
df1 <- attrition %>%
select_if(is.factor)
View(df1)
install.packages("CHAID", repos = "http://R-Forge.R-project.org")
library(CHAID)
control <- chaid_control(maxheight = 4, minbucket = 30)
View(control)
summary(attrition)
model1 <- chaid(attrition ~ ., data = dataset1, control = control)
model1 <- chaid(attrition ~ ., data = df1, control = control)
model1 <- chaid(Attrition ~ ., data = df1, control = control)
View(model1)
plot(model1,
main = "Firts CHAID model",
gp = gpar(fontsize = 9,
color = "black"))
View(model1)
chisq.test(df1$OverTime, df1$Attrition)
library(caret)
predictions <- predict(model1)
confusionMatrix(predictions, dataset1$Attrition)
confusionMatrix(predictions, df1$Attrition)
sort(varimp(model1), decreasing = TRUE)
attrition %>%
select_if(function(col) length(unique(col)) <= 5 & is.integer(col))
attrition %>%
select_if(function(col) length(unique(col)) <= 5 & is.integer(col)) %>%
ncol
attrition %>%
select_if(function(col) length(unique(col)) <= 10 & is.integer(col))
attrition <- attrition %>% mutate_if(function(col) length(unique(col)) <= 10
& is.integer(col), as.factor)
attrition <- attrition %>% mutate_if(function(col) length(unique(col)) <= 10
& is.integer(col), as.factor)
View(attrition)
View(df1)
df2 <- attrition %>% select_if(is.factor)
View(df2)
model2 <- chaid(Attrition ~ .,
data = df2,
control = control)
chisq.test(dataset2$StockOptionLevel, dataset1$Attrition)
chisq.test(df2$StockOptionLevel, df1$Attrition)
confusionMatrix(predictions2, df2$Attrition)
predictions2 <- predict(model2)
confusionMatrix(predictions2, df2$Attrition)
plot(model2)
sort(varimp(model2), decreasing = TRUE)
library(ggplot2)
library(tidyr)
attrition %>%
select_if(is.numeric) %>%
gather(metric, value) %>%
ggplot(aes(value, fill = metric)) +
geom_density(show.legend = FALSE) +
facet_wrap(~ metric, scales = "free")
#transforming Years since last promo variables
attrition$YearsSinceLastPromotion <- cut(attrition$YearsSinceLastPromotion,
breaks = c(-1, 0.9, 1.9, 2.9, 16),
labels = c("less than 1 year",
"1 year", "2years",
"more than 2 years"))
#transforming remaining variables into factors
attrition <- attrition %>% mutate_if(is.numeric, funs(cut_number(., n= 5)))
str(attrition)
# Check if jsonlite is installed; if not, install it
if (!requireNamespace("jsonlite", quietly = TRUE)) {
install.packages("jsonlite", repos = "http://cran.rstudio.com/")
}
# Load the required library
library(jsonlite)
# Read the JSON file into a data frame
setwd("..")
setwd("fulldata")
getwd()
setwd("Documents\UvA\Semester_3\DE\Bootcamp\computational-thinking-week-group-trash\challenge_day4\fulldata")
setwd("Documents\\UvA\\Semester_3\\DE\\Bootcamp\\computational-thinking-week-group-trash\\challenge_day4\\fulldata")
json_data <- fromJSON(readLines("data1.json"))
# Convert the 'people' list to a data frame
people_df <- as.data.frame(json_data$people)
# Replace NAs with column means
for(col_name in names(people_df)) {
if(is.numeric(people_df[[col_name]])) {
# Calculate mean, excluding NAs
col_mean <- mean(people_df[[col_name]], na.rm = TRUE)
# Replace NAs with the calculated mean
people_df[[col_name]][is.na(people_df[[col_name]])] <- col_mean
}
}
# Replace the 'people' list in the original data with the modified data frame
json_data$people <- people_df
# Convert the updated data back to JSON format
json_text <- toJSON(json_data, pretty = TRUE)
# Overwrite the original JSON file
write(json_text, "data1.json")
View(model2)
